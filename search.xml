<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7压缩解压文件</title>
    <url>/posts/6653c2e1/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>



<h2 id="使用tar命令"><a href="#使用tar命令" class="headerlink" title="使用tar命令"></a>使用<code>tar</code>命令</h2><p>centos7一般默认安装了tar</p>
<ul>
<li>压缩</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -cf **.tar.gz **</span><br></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxcf ***.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="使用zip-unzip命令"><a href="#使用zip-unzip命令" class="headerlink" title="使用zip??unzip命令"></a>使用<code>zip</code>??<code>unzip</code>命令</h2><p>若发现 <code>command not found</code>错误，先安装<code>zip</code>??<code>unzip</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install zip unzip</span><br></pre></td></tr></table></figure>
<ul>
<li>压缩</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip **.zip **</span><br></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip **.zip</span><br></pre></td></tr></table></figure>
<h2 id="如何解压tar-xz文件"><a href="#如何解压tar-xz文件" class="headerlink" title="如何解压tar.xz文件"></a>如何解压<code>tar.xz</code>文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xz -d ***.tar.xz</span><br><span class="line">tar -xvf ***.tar</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>压缩</tag>
        <tag>解压</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装DockerCE</title>
    <url>/posts/b9257e54/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<p>1.移除旧版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line"><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">                  docker-client-latest \</span></span><br><span class="line"><span class="bash">                  docker-common \</span></span><br><span class="line"><span class="bash">                  docker-latest \</span></span><br><span class="line"><span class="bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-engine</span></span><br></pre></td></tr></table></figure>
<p>2.安装yum工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line"><span class="bash">  device-mapper-persistent-data \</span></span><br><span class="line"><span class="bash">  lvm2</span></span><br></pre></td></tr></table></figure>
<p>3.设置yum仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;可选&gt;</code></p>
<ul>
<li><p>启用nightly</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure></li>
<li><p>禁用nightly</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">disable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure></li>
<li><p>启用test</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span></span><br></pre></td></tr></table></figure></li>
<li><p>禁用test</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">disable</span> docker-ce-test</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>4.安装DockerCE</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>
<p>5.启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装qBittorrent</title>
    <url>/posts/d0313409/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>



<h5 id="首先安装一些基本依赖"><a href="#首先安装一些基本依赖" class="headerlink" title="首先安装一些基本依赖"></a>首先安装一些基本依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">yum -y install qt-devel boost-devel openssl-devel qt5-qtbase-devel qt5-linguist</span><br></pre></td></tr></table></figure>
<h5 id="安装libtorrent"><a href="#安装libtorrent" class="headerlink" title="安装libtorrent"></a>安装libtorrent</h5><p><a href="https://github.com/arvidn/libtorrent/releases">下载相关版本的发布包</a></p>
<p>此处选择libtorrent-rasterbar-1.1.10.tar.gz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxf libtorrent-rasterbar-1.1.9.tar.gz</span><br><span class="line">cd libtorrent-rasterbar-1.1.9</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr CXXFLAGS&#x3D;-std&#x3D;c++11</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">ln -s &#x2F;usr&#x2F;lib&#x2F;pkgconfig&#x2F;libtorrent-rasterbar.pc &#x2F;usr&#x2F;lib64&#x2F;pkgconfig&#x2F;libtorrent-rasterbar.pc</span><br><span class="line">ln -s &#x2F;usr&#x2F;lib&#x2F;libtorrent-rasterbar.so.9 &#x2F;usr&#x2F;lib64&#x2F;libtorrent-rasterbar.so.9</span><br></pre></td></tr></table></figure>
<h5 id="安装qbittorrent"><a href="#安装qbittorrent" class="headerlink" title="安装qbittorrent"></a>安装qbittorrent</h5><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p><em>当前版本4.1.5编译需要<code>c++14</code>的支持，请检查gcc版本在<code>5.1.0</code>以上</em></p>
<ul>
<li><p>升级gcc   <em>(时间较长)</em><br>安装依赖  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libmpc-devel mpfr-devel gmp-devel</span><br></pre></td></tr></table></figure>
<p>  <a href="https://ftp.gnu.org/gnu/gcc/">下载gcc相应版本</a></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --disable-multilib --enable-languages&#x3D;c,c++</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若出现<code>Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+</code>则在gcc目录下执行</p>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;contrib&#x2F;download_prerequisites</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li><p>编译qbittorrent</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>bt</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7挂载硬盘</title>
    <url>/posts/e6ac7476/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>



<h2 id="1-查看硬盘"><a href="#1-查看硬盘" class="headerlink" title="1. 查看硬盘"></a>1. 查看硬盘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk –l</span><br></pre></td></tr></table></figure>
<h2 id="2-硬盘分区"><a href="#2-硬盘分区" class="headerlink" title="2. 硬盘分区"></a>2. 硬盘分区</h2><p>其中<code>vdb</code>为第一步中查到的硬盘设备名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;fdisk &#x2F;dev&#x2F;vdb</span><br></pre></td></tr></table></figure>

<p><code>tips</code> :下面几步基本一直回车，最后输入q退出</p>
<blockquote>
<p>输入n进行分区</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command (m for help): n</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择分区类型（p主分区）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select (default p): p</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择分区个数（也是分区id） </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Partition number (1-4, default 1): 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择分区空间大小</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-1953525167, default 1953525167): +300GB</span><br></pre></td></tr></table></figure>
<h2 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3. 格式化分区"></a>3. 格式化分区</h2><p><code>tips</code>:这里先查看一下已有硬盘格式 使用 <code>df -T</code></p>
<p>将新分区格式化为ext4文件系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkfs -t ext4 &#x2F;dev&#x2F;vdb</span><br></pre></td></tr></table></figure>
<h2 id="4-挂载硬盘"><a href="#4-挂载硬盘" class="headerlink" title="4. 挂载硬盘"></a>4. 挂载硬盘</h2><p>创建挂载点，在根目录下创建storage目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;storage</span><br></pre></td></tr></table></figure>
<p>将<code>/dev/vdb</code>挂载到<code>/storage</code>下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;vdb &#x2F;storage</span><br></pre></td></tr></table></figure>
<h2 id="5-设置开机启动自动挂载硬盘"><a href="#5-设置开机启动自动挂载硬盘" class="headerlink" title="5. 设置开机启动自动挂载硬盘"></a>5. 设置开机启动自动挂载硬盘</h2><p>新创建的分区不能开机自动挂载，每次重启机器都要手动挂载。</p>
<p>设置开机自动挂载需要修改<code>/etc/fstab</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>
<p>在末尾添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dev&#x2F;vdb &#x2F;storage ext4 defaults 1 2</span><br></pre></td></tr></table></figure>
<h2 id="6-取消挂载"><a href="#6-取消挂载" class="headerlink" title="6. 取消挂载"></a>6. 取消挂载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unmount &#x2F;dev&#x2F;vdb</span><br></pre></td></tr></table></figure>
<p>移除原先添加的启动自动挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java 笔记(一)</title>
    <url>/posts/f9ac33e3/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>



<h5 id="以下的所有条例仅仅作为一种大多数情况下的选择，但是编写代码仍需以实际情况-权衡"><a href="#以下的所有条例仅仅作为一种大多数情况下的选择，但是编写代码仍需以实际情况-权衡" class="headerlink" title="以下的所有条例仅仅作为一种大多数情况下的选择，但是编写代码仍需以实际情况[权衡]"></a>以下的所有条例仅仅作为一种大多数情况下的选择，但是编写代码仍需以实际情况[权衡]</h5><h1 id="1-考虑用静态方法替代构造器"><a href="#1-考虑用静态方法替代构造器" class="headerlink" title="1: 考虑用静态方法替代构造器"></a>1: 考虑用静态方法替代构造器</h1><p>指用静态方法返回某个类的实例<br>eg:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点:  </p>
<ul>
<li>可命名，更容易使调用者理解</li>
<li>实例化更加可控与可定制化<ul>
<li>可用于单例模式，避免实例化重复对象</li>
<li>可返回原来类型的任何子类</li>
<li>创建参数化类型实例时更加简洁</li>
</ul>
</li>
</ul>
<hr>
<h1 id="2-遇到多个构造器参数时，考虑使用构建器"><a href="#2-遇到多个构造器参数时，考虑使用构建器" class="headerlink" title="2: 遇到多个构造器参数时，考虑使用构建器"></a>2: 遇到多个构造器参数时，考虑使用构建器</h1><p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student.Builder(<span class="string">&quot;kevin&quot;</span>, <span class="number">23</span>).grade(<span class="string">&quot;1年级&quot;</span>).build();</span><br></pre></td></tr></table></figure>
<p>优点:  </p>
<ul>
<li>链式调用易于编写和理解</li>
<li>避免编写过多的构造函数</li>
<li>避免使用set方法分步实例化，会有线程安全问题</li>
</ul>
<hr>
<h1 id="3-用枚举类型强化Singleton属性"><a href="#3-用枚举类型强化Singleton属性" class="headerlink" title="3: 用枚举类型强化Singleton属性"></a>3: 用枚举类型强化Singleton属性</h1><p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Instance</span> </span>&#123;</span><br><span class="line">	INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点:  </p>
<ul>
<li>无需实现readResolve方法即可保证反序列化无法破坏单例</li>
</ul>
<hr>
<h1 id="4-使用私有构造器强化不可实例化的能力"><a href="#4-使用私有构造器强化不可实例化的能力" class="headerlink" title="4: 使用私有构造器强化不可实例化的能力"></a>4: 使用私有构造器强化不可实例化的能力</h1><p>一些没有必要实例化的类[如工具类]，应当私有其构造函数  </p>
<p>优点:避免无意识[不小心]的实例化<br>缺点:导致其无法被继承</p>
<hr>
<h1 id="5-避免创造不必要的对象"><a href="#5-避免创造不必要的对象" class="headerlink" title="5: 避免创造不必要的对象"></a>5: 避免创造不必要的对象</h1><p>当你应该重用现有对象时，请不要创建新对象,这里的[应该]指创建新对象代价较高时</p>
<p>一些公用的，不变的实例，可以提出来只构建一次，而不是放在方法内部去每次创建新实例  </p>
<p><code>自动装箱</code>会导致实例化其包装对象,因此在基本类型满足需求的情况下，不要使用其包装类型</p>
<hr>
<h1 id="6-消除过期的对象引用"><a href="#6-消除过期的对象引用" class="headerlink" title="6: 消除过期的对象引用"></a>6: 消除过期的对象引用</h1><p>过期的对象引用会在极端情况下导致内存泄漏,内存泄漏常见于三个来源</p>
<ul>
<li><p>自己管理内存</p>
<p>  如果一个容器中对象引用的删除是逻辑管理[类似逻辑删除]的，即其没有被真正移除，而用户在逻辑上认为已被移除.那么应该警惕内存泄漏问题,一旦元素被释放掉，应当同时移除该对象的引用</p>
<p>  eg:  </p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Strack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        &#125;</span><br><span class="line">        Object result = <span class="keyword">return</span> elements[--size];</span><br><span class="line">		<span class="comment">// 移除该对象的引用</span></span><br><span class="line">		elements[size] = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  例如eg中被弹出的对象，哪怕在别的地方已经失去引用，但在elements中其位置未被别的对象引用替换前，elements仍保持了其过期的引用，会导致该对象以及该对象引用的对象无法被垃圾回收</p>
</li>
<li><p>缓存</p>
<p>  当对象的引用被放入缓存中后，很容易被遗忘或忽略  </p>
<p>  在某些情况下，如缓存的存在是否必要仅有外部引用而不是值来决定时，可以考虑使用WeakHashMap来处理</p>
<p>  更常见的做法是使用某种策略定期清理不用的缓存，正如许多框架所做的那样</p>
</li>
<li><p>监听器与其他回调</p>
</li>
</ul>
<hr>
<h1 id="7-避免使用终结方法"><a href="#7-避免使用终结方法" class="headerlink" title="7: 避免使用终结方法"></a>7: 避免使用终结方法</h1><p>finalizer方法通常是不可预测、不稳定的，java规范也并不保证其一定会执行。在java中，内存资源的回收通常交由垃圾回收器处理，而其他资源[如文件流]的回收通常用try-finally来完成,因此应该尽量[避免]使用finalizer来做这些事。</p>
<hr>
<h1 id="8-覆盖equals时遵守通用约定"><a href="#8-覆盖equals时遵守通用约定" class="headerlink" title="8: 覆盖equals时遵守通用约定"></a>8: 覆盖equals时遵守通用约定</h1><p>通常情况下，我们认为每一个对象都是独一无二的，因此它应该只等于其自身,Object类的equals方法也确实是这么做的<br>但equals方法的结果应当取决于用户当前期望什么样是相等的，即逻辑相等。所以在某些情况下我们需要重写equals方法以达到目的。<br>很多已有的类中也重写了equals方法，他们都遵循了一些通用的约定。若我们重写方法时没有遵循这些约定，会造成某些不可预知的错误。</p>
<ul>
<li>自反性<br>对于任何非null的引用值x，x.equals(x)必须返回true</li>
<li>对称性<br>对于任何非null的引用值x、y，当且仅当y.equals(x)为true时，x.equals(y)必须为true</li>
<li>传递性<br>对于任何非null的引用值x、y、z，如果x.equals(y)为true，并且y.equals(z)也为true，那么x.equals(z)也必须为true</li>
<li>一致性<br>对于任何非null的引用值x、y，只要equals的比较操作在对象中所用的信息没有被修改,多次调用equals方法返回的结果必须一致</li>
<li>对于任何非null的引用值x,x.equals(null)必须为false</li>
</ul>
<hr>
<h1 id="9-覆盖equals时总要覆盖hashCode"><a href="#9-覆盖equals时总要覆盖hashCode" class="headerlink" title="9: 覆盖equals时总要覆盖hashCode"></a>9: 覆盖equals时总要覆盖hashCode</h1><p>重写equals方法时应当重写hashCode方法，否则会导致该类无法结合所有基于散列的集合一起正常工作</p>
<ul>
<li>若一个类的equals方法返回true，则hashCode方法应当返回相同的整数</li>
<li>若一个类的equals方法返回false,hashCode方法不一定要返回不同的整数，但返回不同的整数有利于提高性能</li>
</ul>
<hr>
<h1 id="10-使用要覆盖toString"><a href="#10-使用要覆盖toString" class="headerlink" title="10: 使用要覆盖toString"></a>10: 使用要覆盖toString</h1><p>应当尽可能的覆盖toString方法，返回该对象的内容摘要</p>
<p>有助于在任何可能输出该类信息的地方<br>使得使用者得到易于理解的信息</p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>apt换国内源</title>
    <url>/posts/a84f8eca/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h3 id="1-备份原配置文件"><a href="#1-备份原配置文件" class="headerlink" title="1. 备份原配置文件"></a>1. 备份原配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure>


<h3 id="2-修改sources-list"><a href="#2-修改sources-list" class="headerlink" title="2. 修改sources.list"></a>2. 修改sources.list</h3><p>stretch(debian9) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian stretch main contrib non-free</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian stretch main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian stretch-updates main contrib non-free</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian stretch-updates main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security stretch&#x2F;updates main contrib non-free</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security stretch&#x2F;updates main contrib non-free</span><br></pre></td></tr></table></figure>
<h3 id="3-更新源"><a href="#3-更新源" class="headerlink" title="3. 更新源"></a>3. 更新源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>apt</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看最大文件占用</title>
    <url>/posts/5ef19cda/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<p>其中 <code>/path</code> 为需要查询的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h --max-depth&#x3D;1 &#x2F;path</span><br></pre></td></tr></table></figure>
<!--more-->

<p>按文件从大到小排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h --max-depth&#x3D;1 &#x2F;path | sort -nr</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>URL中文参数编码问题</title>
    <url>/posts/e174da9f/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>



<p><strong>需要检查的几个地方</strong></p>
<p>1.request设置编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>


<p>2. tomcat设置编码 ```server.xml文件```</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>或者直接使用编码工具</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(str, encoding)</span><br><span class="line">URLDecoder.decode(str, encoding)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>URL</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>git 入门</title>
    <url>/posts/c2d266ba/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h2 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的名字&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure>
<!-- more -->

<h2 id="保存账号密码"><a href="#保存账号密码" class="headerlink" title="保存账号密码"></a>保存账号密码</h2><ul>
<li>记住密码(默认15分钟)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure>
<ul>
<li>自己设置时间(单位，秒)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config credential.helper &#39;cache --timeout&#x3D;3600&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>长期保存</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>克隆项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 克隆master分支</span><br><span class="line">git clone &lt;版本库的网址&gt;</span><br><span class="line">&#x2F;&#x2F; 指定克隆的分支名</span><br><span class="line">git clone -b &lt;分支名&gt; &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看当前状态</span><br><span class="line">git status</span><br><span class="line">&#x2F;&#x2F; 查看本地仓库的提交历史</span><br><span class="line">git log</span><br></pre></td></tr></table></figure>
<ul>
<li>提交代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加文件包版本控制</span><br><span class="line">git add &lt;文件&gt;</span><br><span class="line">&#x2F;&#x2F; 提交到本地仓库</span><br><span class="line">git commit -m &#39;提交说明&#39;</span><br><span class="line">&#x2F;&#x2F; 提交代码到远程仓库</span><br><span class="line">git push origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>更新代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure>
<h2 id="一次简单的流程"><a href="#一次简单的流程" class="headerlink" title="一次简单的流程"></a>一次简单的流程</h2><p>先将代码clone到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;项目地址&gt;</span><br></pre></td></tr></table></figure>
<p>添加一个新文件,并将新文件添加到版本控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add init.txt</span><br></pre></td></tr></table></figure>
<p>提交到本地仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;添加了一个新文件&#39; </span><br></pre></td></tr></table></figure>
<p>将文件<code>init.txt</code>修改一点内容,再次提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add init.txt</span><br><span class="line">git commit -m &#39;修改了一点内容&#39;</span><br></pre></td></tr></table></figure>
<p>将文件提交到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin &lt;分支,默认master&gt;</span><br></pre></td></tr></table></figure>













































]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>dns解析中各种记录的说明</title>
    <url>/posts/b237770b/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h4 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h4><p>将域名指向一个IPV4地址</p>
<h4 id="CNAME记录"><a href="#CNAME记录" class="headerlink" title="CNAME记录"></a>CNAME记录</h4><p>将域名指向一个域名，访问此域名等同于访问被指向的域名</p>
<h4 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h4><p>建立电子邮箱服务，指向邮箱服务商提供的MX记录地址</p>
<h4 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h4><p>域名解析服务器记录，可将子域名指定某个域名服务器来解析</p>
<h4 id="TXT记录"><a href="#TXT记录" class="headerlink" title="TXT记录"></a>TXT记录</h4><p>可任意填写，可为空，一般做一些验证时使用。</p>
<h4 id="AAAA记录"><a href="#AAAA记录" class="headerlink" title="AAAA记录"></a>AAAA记录</h4><p>将域名指向一个IPV6地址</p>
<h4 id="SRV记录"><a href="#SRV记录" class="headerlink" title="SRV记录"></a>SRV记录</h4><p>SRV记录了哪台计算机提供了哪个服务，格式为：服务名.协议类型</p>
]]></content>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA技巧收集</title>
    <url>/posts/ec9abed7/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h3 id="1-查找项目中未使用的代码"><a href="#1-查找项目中未使用的代码" class="headerlink" title="1. 查找项目中未使用的代码"></a>1. 查找项目中未使用的代码</h3><ol>
<li><p>使用快捷键 <code>Ctrl</code>+<code>Alt</code>+<code>Shift</code>+<code>I</code></p>
</li>
<li><p>输入 <code>Unused declaration</code> 选择 <code>Java | declaration redundancy</code> 选项</p>
</li>
<li><p>在下方 <code>Members to report</code> 框中勾选搜索范围</p>
</li>
<li><p>点击 <code>ok</code> 搜索</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>java设计模式之单例模式</title>
    <url>/posts/23a824cc/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ol>
<li>单例类只能有一个实例</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ol>
<hr>
<h2 id="常见的几种写法"><a href="#常见的几种写法" class="headerlink" title="常见的几种写法"></a>常见的几种写法</h2><ul>
<li><h3 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h3 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a>懒汉式(线程安全)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>懒加载，但效率低</p>
</blockquote>
</li>
<li><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>不具备懒加载</p>
</blockquote>
</li>
<li><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>懒加载</p>
</blockquote>
</li>
<li><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>推荐<br>能避免多线程同步问题<br>能防止反序列化重新创建新的对象</p>
</blockquote>
</li>
<li><h3 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="一些扩展"><a href="#一些扩展" class="headerlink" title="一些扩展"></a>一些扩展</h2><h5 id="如何破坏单例"><a href="#如何破坏单例" class="headerlink" title="如何破坏单例"></a>如何破坏单例</h5><ul>
<li>反射<br>虽然我们<code>私有</code>了构造方法，但是<code>反射</code>仍然能够通过<code>AccessibleObject.setAccessible</code>访问到私有方法，如：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Singleton.class;</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor(<span class="keyword">null</span>); </span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Singleton singleton = (Singleton) cons.newInstance(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></li>
<li>反序列化<br>反序列化通过<code>ObjectInputputStream</code>来实现，下面来看代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">int</span> outerHandle = passHandle;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Object obj = readObject0(<span class="keyword">false</span>);</span><br><span class="line">		handles.markDependency(outerHandle, passHandle);</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
进入<code>readObject0</code>方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">			<span class="keyword">case</span> TC_NULL:</span><br><span class="line">			<span class="keyword">return</span> readNull();</span><br><span class="line">		<span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">			<span class="keyword">return</span> readHandle(unshared);</span><br><span class="line">		...</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">			<span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line">		<span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
进入<code>readOrdinaryObject</code>方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	Object obj;</span><br><span class="line">  	<span class="keyword">try</span> &#123;</span><br><span class="line">    		obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">    	&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">		desc.forClass().getName(),<span class="string">&quot;unable to create instance&quot;</span>).initCause(ex);</span><br><span class="line">    	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由此看出，反序列化也是通过反射的方式破坏单例的</p>
</blockquote>
</li>
</ul>
<h5 id="防止单例被破坏"><a href="#防止单例被破坏" class="headerlink" title="防止单例被破坏"></a>防止单例被破坏</h5><ul>
<li>使用单元素枚举</li>
<li>单例类中定义<code>readResolve</code>方法</li>
</ul>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.importnew.com/29338.html">深入理解单例模式（上）</a><br><a href="http://www.importnew.com/29343.html">深入理解单例模式（下）</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
        <tag>单例</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot devtools 热部署</title>
    <url>/posts/5af71517/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h5 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>maven plugin中添加</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- spring热部署--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="application-yml中添加"><a href="#application-yml中添加" class="headerlink" title="application.yml中添加"></a>application.yml中添加</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment">#热部署生效</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>当我们修改了java类后，IDEA默认是不自动编译的，而spring-boot-devtools又是监测classpath下的文件发生变化才会重启应用 </p>
<ul>
<li>Ctrl+F9重新编译一下即可</li>
<li>1. <code>File</code>&gt;&gt;<code>Settings</code>&gt;&gt;<code>Build</code>&gt;&gt;<code>Compiler</code>&gt;&gt;<code>Build Project automatically</code><br>2. <code>ctrl + shift + alt + /</code>,选择<code>Registry</code>,勾上 <code>Compiler autoMake allow when app running</code></li>
</ul>
]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>热部署</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql主从复制及读写分离的尝试</title>
    <url>/posts/6fc5faff/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<hr>
<h1 id="centos7-rpm安装mysql"><a href="#centos7-rpm安装mysql" class="headerlink" title="centos7 rpm安装mysql"></a>centos7 rpm安装mysql</h1><p>此次使用的是<code>MySQL Community Server 5.5.62</code></p>
<p>可以自己选择版本<a href="https://dev.mysql.com/downloads/mysql/5.5.html#downloads">下载页面</a></p>
<p>附上本次下载地址<br><a href="https://cdn.mysql.com//Downloads/MySQL-5.5/MySQL-server-5.5.62-1.el7.x86_64.rpm">mysql server</a><br><a href="https://cdn.mysql.com//Downloads/MySQL-5.5/MySQL-client-5.5.62-1.el7.x86_64.rpm">mysql client</a></p>
<ul>
<li><p>安装mysql-server  </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-server-5.5.62-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>  注: <code>-i</code>安装<br><code>-v</code>可视化<br><code>-h</code>显示进度</p>
<p>  出现一下错误</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: Failed dependencies:</span><br><span class="line">        libaio.so.1()(64bit) is needed by MySQL-server-5.5.62-1.el7.x86_64</span><br><span class="line">        libaio.so.1(LIBAIO_0.1)(64bit) is needed by MySQL-server-5.5.62-1.el7.x86_64</span><br><span class="line">        libaio.so.1(LIBAIO_0.4)(64bit) is needed by MySQL-server-5.5.62-1.el7.x86_64</span><br><span class="line">        perl(Data::Dumper) is needed by MySQL-server-5.5.62-1.el7.x86_64</span><br></pre></td></tr></table></figure>
<p>  提示缺少以下依赖</p>
<ul>
<li>libaio</li>
<li>perl(Data::Dumper)</li>
</ul>
</li>
</ul>
<pre><code>下载地址  </code></pre><p><a href="http://mirror.centos.org/centos-7/7.6.1810/os/x86_64/Packages/libaio-0.3.109-13.el7.x86_64.rpm">libaio-0.3.109-13.el7.x86_64.rpm</a><br><a href="http://mirror.centos.org/centos-7/7.6.1810/os/x86_64/Packages/perl-Data-Dumper-2.145-3.el7.x86_64.rpm">perl-Data-Dumper-2.145-3.el7.x86_64.rpm</a></p>
<pre><code>将以上依赖安装后再次安装mysql-server

又出现以下错误

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">        file &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F;README from install of MySQL-server-5.5.62-1.el7.x86_64 conflicts with file from package mariadb-libs-1:5.5.60-1.el7_5.x86_64</span><br><span class="line">        file &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F;Index.xml from install of MySQL-server-5.5.62-1.el7.x86_64 conflicts with file from package mariadb-libs-1:5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>
先卸载旧的mysql-libs

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove mysql-libs</span><br></pre></td></tr></table></figure>
再次安装mysql-server

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warning: MySQL-server-5.5.62-1.el7.x86_64.rpm: Header V3 DSA&#x2F;SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating &#x2F; installing...</span><br><span class="line">   1:MySQL-server-5.5.62-1.el7        ################################# [100%]</span><br><span class="line">warning: user mysql does not exist - using root</span><br><span class="line">warning: group mysql does not exist - using root</span><br><span class="line">190711  9:20:16 [Note] Ignoring --secure-file-priv value as server is running with --bootstrap.</span><br><span class="line">190711  9:20:16 [Note] &#x2F;usr&#x2F;sbin&#x2F;mysqld (mysqld 5.5.62) starting as process 12846 ...</span><br><span class="line">190711  9:20:16 [Note] Ignoring --secure-file-priv value as server is running with --bootstrap.</span><br><span class="line">190711  9:20:16 [Note] &#x2F;usr&#x2F;sbin&#x2F;mysqld (mysqld 5.5.62) starting as process 12853 ...</span><br><span class="line"></span><br><span class="line">	PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">	&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password &#39;new-password&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root -h iZm5e2cvrl3la2bzgnuxnnZ password &#39;new-password&#39;</span><br><span class="line"></span><br><span class="line">	Alternatively you can run:</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysql_secure_installation</span><br><span class="line"></span><br><span class="line">	which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">	See the manual for more instructions.</span><br><span class="line"></span><br><span class="line">	Please report any problems at http:&#x2F;&#x2F;bugs.mysql.com&#x2F;</span><br></pre></td></tr></table></figure>
有以上提示就安装成功了</code></pre><ul>
<li><p>安装mysql-client</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-client-5.5.62-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>  根据先前mysql-server安装成功后的提示依次执行</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password &#39;new-password&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root -h iZm5e2cvrl3la2bzgnuxnnZ password &#39;new-password&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>以交互式方式</p>
<ul>
<li>设置root密码</li>
<li>移除test库</li>
<li>禁止root远程登录</li>
<li>…</li>
</ul>
</li>
</ul>
<h1 id="配置master数据库"><a href="#配置master数据库" class="headerlink" title="配置master数据库"></a>配置master数据库</h1><ul>
<li><p>my.cnf文件新增</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server-id &#x3D; 1</span><br><span class="line">log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">binlog-ignore-db &#x3D; mysql</span><br><span class="line">binlog-ignore-db &#x3D; information_schema</span><br></pre></td></tr></table></figure></li>
<li><p>重启master数据库  </p>
</li>
<li><p>查看master状态</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+--------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB         |</span><br><span class="line">+------------------+----------+--------------+--------------------------+</span><br><span class="line">| mysql-bin.000001 |      339 |              | mysql,information_schema |</span><br><span class="line">+------------------+----------+--------------+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>给slave数据库分配账号</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#39;slave&#39;@&#39;%&#39; identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure>
<p>  此处<code>slave@%</code>中的<code>%</code>可以换成slave的ip</p>
</li>
</ul>
<h1 id="配置slave数据库"><a href="#配置slave数据库" class="headerlink" title="配置slave数据库"></a>配置slave数据库</h1><ul>
<li><p>my.cnf文件新增</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server-id &#x3D; 2</span><br><span class="line">replicate-ignore-db &#x3D; mysql</span><br><span class="line">replicate-ignore-db &#x3D; information_schema</span><br></pre></td></tr></table></figure></li>
<li><p>连接到master数据库</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST&#x3D;&#39;1.1.1.1(masterIp)&#39;,MASTER_USER&#x3D;&#39;slave&#39;, MASTER_PASSWORD&#x3D;&#39;password&#39;,MASTER_LOG_FILE&#x3D;&#39; mysql-binlog.000001&#39;,MASTER_LOG_POS&#x3D;339;</span><br></pre></td></tr></table></figure>
<p>填入<code>master数据库地址</code>、先前从master数据库中查看到的<code>binlog信息</code>，以及分配的<code>账号密码</code></p>
</li>
<li><p>启用slave同步</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure></li>
<li><p>查看slave信息</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>
<p>  显示如下即开启同步</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>
<h1 id="mycat读写分离配置"><a href="#mycat读写分离配置" class="headerlink" title="mycat读写分离配置"></a>mycat读写分离配置</h1></li>
</ul>
<p>config/schema.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;schema name&#x3D;&quot;databasename&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot; dataNode&#x3D;&quot;dn1&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;schema&gt;</span><br><span class="line"></span><br><span class="line">&lt;dataNode name&#x3D;&quot;dn1&quot; dataHost&#x3D;&quot;localhost1&quot; database&#x3D;&quot;databasename&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;dataHost name&#x3D;&quot;localhost1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;3&quot;</span><br><span class="line">		  writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;</span><br><span class="line">	&lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;</span><br><span class="line">	&lt;!-- can have multi write hosts --&gt;</span><br><span class="line">	&lt;writeHost host&#x3D;&quot;hostM1&quot; url&#x3D;&quot;master1:3306&quot; user&#x3D;&quot;root&quot;</span><br><span class="line">			   password&#x3D;&quot;root&quot;&gt;</span><br><span class="line">		&lt;!-- can have multi read hosts --&gt;</span><br><span class="line">		&lt;readHost host&#x3D;&quot;hostS2&quot; url&#x3D;&quot;ip1:3306&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">		&lt;readHost host&#x3D;&quot;hosts3&quot; url&#x3D;&quot;ip2:3306&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;writeHost&gt;</span><br><span class="line">&lt;&#x2F;dataHost&gt;</span><br></pre></td></tr></table></figure>
<p>config/server.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;user name&#x3D;&quot;username&quot; defaultAccount&#x3D;&quot;true&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;password&quot;&gt;password&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;schemas&quot;&gt;database&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>rfc2616_section-14</title>
    <url>/posts/e7a2c981/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<blockquote class="blockquote-center">本文主要对http协议中的header参数做一个清单，主要包括参数的格式及解释
</blockquote>



<h5 id="1-Accept"><a href="#1-Accept" class="headerlink" title="1. Accept"></a>1. Accept</h5><p>Accept指明客户端可以接收什么样的媒体格式</p>
<ul>
<li><p>格式<br>Accept: media-range[accept-params],…</p>
<ul>
<li><p><code>media-range</code>:媒体类型  type/* | type/subtype | */*<br>eg:text/html  </p>
</li>
<li><p><code>accept-params</code>: 附加参数 eg: q=0.8</p>
</li>
<li><p>其中media-range以<code>,</code>分割。media-range与accept-params用<code>;</code>连接  </p>
</li>
<li><p>诸如type/*指大类下的全部小类  </p>
</li>
<li><p>q指优先级，范围[0-1],默认1,数字越大优先级越高,服务器在能够返回的类型中应当优先返回优先级高的媒体格式</p>
</li>
<li><p>媒体类型可以被更具体的媒体类型覆盖<br>eg: text/*,text/html 后者将会覆盖前者，等同具有更高的优先级</p>
</li>
<li><p>q因子的取值是某种媒体类型找到的最高优先级媒体类型的q值，即最具体的媒体类型的q值。</p>
</li>
<li><p>若无Accept字段，则认为所有的媒体类型都可以接受</p>
</li>
<li><p>若服务器无法返回Accept中指定的任一类型，应当返回406 (not acceptable)</p>
</li>
</ul>
</li>
</ul>
<h5 id="2-Accept-Charset"><a href="#2-Accept-Charset" class="headerlink" title="2. Accept-Charset"></a>2. Accept-Charset</h5><p>Accept-Charset指明客户端可以接收什么样的字符集</p>
<ul>
<li>格式<br>Accept-Charset: ( charset | * ) [q=value], …  <ul>
<li>q指优先级，范围[0-1],默认1，数字越大优先级越高</li>
<li>若存在特殊值*,则匹配所有字符集，包括ISO-8859-1</li>
<li>若不存在*,则未显式指定的字符集q值为0。ISO-8859-1除外，为1。</li>
<li>若不存在Accept-Charset字段，则认为所有字符集均可接受</li>
<li>若服务器无法返回Accept-Charset中指定的任一字符集，应当返回406 (not acceptable)</li>
</ul>
</li>
</ul>
<h5 id="3-Accept-Encoding"><a href="#3-Accept-Encoding" class="headerlink" title="3. Accept-Encoding"></a>3. Accept-Encoding</h5><ul>
<li>格式<br>Accept-Encoding: ( codings | * ) [q=values], …  <ul>
<li>如果服务器的编码在Accept-Encoding的指定中且q!=0，则该编码可用</li>
<li>特殊*匹配所有未明确列出的编码方式</li>
<li>如果多个指定的编码都可接受，则使用其中q值最高的返回</li>
<li><code>identity</code>默认是被接受的，除非显式拒绝，如<code>identity;q=0</code>或<code>*;q=0</code>。当Accept-Encoding为空时，则认为只接受<code>identity</code>编码</li>
<li>当有Accept-Encoding字段时，服务器无法以指定的编码返回，应当返回406 (not acceptable)</li>
<li>当无Accept-Encoding字段时，服务器认为客户端可以接受任意编码，若identity在服务器可用，则应当使用identity,除非其他编码更合适，如有额外内容需要返回.</li>
<li>当无Accept-Encoding字段时,且identity在服务器不可用时，可以考虑http1.0通常能够接受的编码,如(gzip,compress)等</li>
<li>有时一些旧客户端发送的内容与Accept-Encoding指定的编码不一致时，可以考虑以内容来判断返回什么编码</li>
<li>http1.0在Accept-Encoding中不支持q值，所以q值的功能在x-gzip、x-compress中是无效的，也是不允许的.</li>
</ul>
</li>
</ul>
<h5 id="4-Accept-Language"><a href="#4-Accept-Language" class="headerlink" title="4. Accept-Language"></a>4. Accept-Language</h5><ul>
<li>格式<br>Accept-Language: (language | *) [q=value], …  <ul>
<li>q值为优先级，范围[0-1]，默认为1，数字越大优先级越高</li>
<li>语言与指定的language完全匹配或者前缀匹配(即-之前完全匹配)，都认为匹配</li>
<li>特别的*匹配所有</li>
<li>前缀匹配不意味着语言也如此分配,即不认为用户理解带特定标签的语言，也会理解所有带该标签的语言</li>
<li>q的值应当为最长匹配语言的q值</li>
<li>若无Accept-Language，则服务器认为所有语言都可接受</li>
<li>若有Accept-Language，则服务器认为所有指定的并且q值大于0的语言可接受</li>
<li>在请求中携带用户的完整语言信息可能会有隐私的问题，建议客户端给出语言偏好选择，若选择被禁用，则不应该在请求头中携带语言信息</li>
<li>用户不了解语言匹配的规则，客户端应当给与用户一定的引导</li>
</ul>
</li>
</ul>
<h5 id="5-Accept-Ranges"><a href="#5-Accept-Ranges" class="headerlink" title="5. Accept-Ranges"></a>5. Accept-Ranges</h5><ul>
<li>格式  </li>
</ul>
<h5 id="17-Content-Type"><a href="#17-Content-Type" class="headerlink" title="17. Content-Type"></a>17. Content-Type</h5><ul>
<li>格式  </li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下使用vundle管理gvim插件</title>
    <url>/posts/d6218fbd/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h2 id="1-安装gvim"><a href="#1-安装gvim" class="headerlink" title="1.安装gvim"></a>1.安装gvim</h2><p>官网下载地址 <a href="http://www.vim.org/download.php">http://www.vim.org/download.php</a>  </p>
<p>注意安装目录避免空格、中文</p>
<p>安装目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim</span><br><span class="line">|-- .vimrc   vim配置文件</span><br><span class="line">|-- vim74    vim目录</span><br><span class="line">|     |</span><br><span class="line">|-- vimfiles  其他文件目录，如插件等</span><br><span class="line">|     |</span><br></pre></td></tr></table></figure>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>创建一个系统变量 例: <code>VIM = E:\gvim\Vim</code></p>
<p>在<code>path</code>中加入<code>%VIM%\vim74\</code></p>
<h2 id="2-安装vundle"><a href="#2-安装vundle" class="headerlink" title="2.安装vundle"></a>2.安装vundle</h2><p>安装<code>vundle</code>需要<code>git</code>与<code>curl</code></p>
<p>此处不介绍git与curl的安装</p>
<p>进入vim安装目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git vimfiles/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>
<p>复制<code>vundle官网</code>默认配置替换<code>.vimrc</code>文件内容<br><a href="https://github.com/VundleVim/Vundle.vim">https://github.com/VundleVim/Vundle.vim</a></p>
<p>这里粘一份默认配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set nocompatible              &quot; be iMproved, required</span><br><span class="line">filetype off                  &quot; required</span><br><span class="line"></span><br><span class="line">&quot; set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class="line">&quot;call vundle#begin(&#39;~&#x2F;some&#x2F;path&#x2F;here&#39;)</span><br><span class="line"></span><br><span class="line">&quot; let Vundle manage Vundle, required</span><br><span class="line">Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;</span><br><span class="line"></span><br><span class="line">&quot; The following are examples of different formats supported.</span><br><span class="line">&quot; Keep Plugin commands between vundle#begin&#x2F;end.</span><br><span class="line">&quot; plugin on GitHub repo</span><br><span class="line">Plugin &#39;tpope&#x2F;vim-fugitive&#39;</span><br><span class="line">&quot; plugin from http:&#x2F;&#x2F;vim-scripts.org&#x2F;vim&#x2F;scripts.html</span><br><span class="line">&quot; Plugin &#39;L9&#39;</span><br><span class="line">&quot; Git plugin not hosted on GitHub</span><br><span class="line">Plugin &#39;git:&#x2F;&#x2F;git.wincent.com&#x2F;command-t.git&#39;</span><br><span class="line">&quot; git repos on your local machine (i.e. when working on your own plugin)</span><br><span class="line">Plugin &#39;file:&#x2F;&#x2F;&#x2F;home&#x2F;gmarik&#x2F;path&#x2F;to&#x2F;plugin&#39;</span><br><span class="line">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class="line">&quot; Pass the path to set the runtimepath properly.</span><br><span class="line">Plugin &#39;rstacruz&#x2F;sparkup&#39;, &#123;&#39;rtp&#39;: &#39;vim&#x2F;&#39;&#125;</span><br><span class="line">&quot; Install L9 and avoid a Naming conflict if you&#39;ve already installed a</span><br><span class="line">&quot; different version somewhere else.</span><br><span class="line">&quot; Plugin &#39;ascenator&#x2F;L9&#39;, &#123;&#39;name&#39;: &#39;newL9&#39;&#125;</span><br><span class="line"></span><br><span class="line">&quot; All of your Plugins must be added before the following line</span><br><span class="line">call vundle#end()            &quot; required</span><br><span class="line">filetype plugin indent on    &quot; required</span><br><span class="line">&quot; To ignore plugin indent changes, instead use:</span><br><span class="line">&quot;filetype plugin on</span><br><span class="line">&quot;</span><br><span class="line">&quot; Brief help</span><br><span class="line">&quot; :PluginList       - lists configured plugins</span><br><span class="line">&quot; :PluginInstall    - installs plugins; append &#96;!&#96; to update or just :PluginUpdate</span><br><span class="line">&quot; :PluginSearch foo - searches for foo; append &#96;!&#96; to refresh local cache</span><br><span class="line">&quot; :PluginClean      - confirms removal of unused plugins; append &#96;!&#96; to auto-approve removal</span><br><span class="line">&quot;</span><br><span class="line">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class="line">&quot; Put your non-Plugin stuff after this line</span><br></pre></td></tr></table></figure>
<p>替换其中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class="line">call vundle#begin()</span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set rtp+&#x3D;$VIM&#x2F;vimfiles&#x2F;bundle&#x2F;vundle.vim&#x2F;</span><br><span class="line">call vundle#rc(&#39;$VIM&#x2F;vimfiles&#x2F;bundle&#x2F;&#39;)</span><br></pre></td></tr></table></figure>
<p>即指定<code>vundle</code>的目录</p>
<p>其中如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Plugin &#39;tpope&#x2F;vim-fugitive&#39;</span><br><span class="line">Plugin &#39;git:&#x2F;&#x2F;git.wincent.com&#x2F;command-t.git&#39;</span><br><span class="line">Plugin &#39;file:&#x2F;&#x2F;&#x2F;home&#x2F;gmarik&#x2F;path&#x2F;to&#x2F;plugin&#39;</span><br><span class="line">Plugin &#39;rstacruz&#x2F;sparkup&#39;, &#123;&#39;rtp&#39;: &#39;vim&#x2F;&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>是几种配置插件的方式</p>
<p>可自行替换成自己需要的插件</p>
<p>打开<code>gvim</code>后使用<br><code>:BundleInstall</code>命令安装插件<br><code>:BundleList</code> 查看插件列表<br><code>:BundleClean</code> 清理不用的插件</p>
]]></content>
      <tags>
        <tag>vim</tag>
        <tag>vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>yum使用阿里云镜像源</title>
    <url>/posts/e341b84/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h3 id="1-备份原配置文件"><a href="#1-备份原配置文件" class="headerlink" title="1. 备份原配置文件"></a>1. 备份原配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>


<h3 id="2-下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#2-下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="2. 下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>2. 下载新的<code>CentOS-Base.repo</code> 到<code>/etc/yum.repos.d/</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br></pre></td></tr></table></figure>
<h3 id="3-生成缓存"><a href="#3-生成缓存" class="headerlink" title="3. 生成缓存"></a>3. 生成缓存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>yum</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>一些jvm内存分析命令</title>
    <url>/posts/f76bf494/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">导出简单的内存信息</span><br><span class="line">jmap -histo &lt;pid&gt; &gt; file.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">导出完整heap信息</span><br><span class="line">jmap -dump:live,format=b,file=heap-dump.bin &lt;pid&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析dumpfile</span><br><span class="line">jhat &lt;dumpfile&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1s打印一次内存信息</span><br><span class="line">jstat -gcutil &lt;pid&gt; 1000</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jvm</tag>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Let&#39;s Encrypt为你的网站启用https</title>
    <url>/posts/16932c27/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<blockquote class="blockquote-center">`Let's Encrypt` 是一个`免费`、`开放`，`自动化`的`证书颁发机构`。我们可以从这取得一个证书为网站启用https
</blockquote>



<h2 id="安装cerbot"><a href="#安装cerbot" class="headerlink" title="安装cerbot"></a>安装<code>cerbot</code></h2><p>官方推荐我们使用<code>cerbot</code>客户端<br>我这里使用的是<code>centos-7</code>系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y cerbot</span><br></pre></td></tr></table></figure>
<p>若yum仓库无cerbot<br>则尝试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install python2-certbot-nginx</span><br></pre></td></tr></table></figure>
<h4 id="安装中可能出现的问题"><a href="#安装中可能出现的问题" class="headerlink" title="安装中可能出现的问题"></a>安装中可能出现的问题</h4><p>解决方案</p>
<p>1.安装python-urllib3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;vault.centos.org&#x2F;7.7.1908&#x2F;os&#x2F;Source&#x2F;SPackages&#x2F;python-urllib3-1.10.2-7.el7.src.rpm</span><br><span class="line">rpm -ivh python-urllib3-1.10.2-7.el7.src.rpm</span><br></pre></td></tr></table></figure>
<p>2.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --upgrade setuptools</span><br></pre></td></tr></table></figure>
<p>3.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests urllib3 pyOpenSSL --force --upgrade</span><br></pre></td></tr></table></figure>
<p>4.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests&#x3D;&#x3D;2.6.0</span><br></pre></td></tr></table></figure>


<h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>有两种情况</p>
<h3 id="网站已经在运行了"><a href="#网站已经在运行了" class="headerlink" title="网站已经在运行了"></a>网站已经在运行了</h3><p>那么使用<code>webroot</code>模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo certbot certonly --webroot -w /var/www/example -d example.com</span><br></pre></td></tr></table></figure>
<h3 id="项目不是一个网站而是服务"><a href="#项目不是一个网站而是服务" class="headerlink" title="项目不是一个网站而是服务"></a>项目不是一个网站而是服务</h3><p>可以使用<code>standalone</code>模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo certbot certonly --standalone -d example.com</span><br></pre></td></tr></table></figure>
<p>完成后提示如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"></span><br><span class="line">- Congratulations! Your certificate and chain have been saved at</span><br><span class="line"></span><br><span class="line">/etc/letsencrypt/live/example.com/fullchain.pem. Your cert will</span><br><span class="line"></span><br><span class="line">expire on 2018-02-08. To obtain a new version of the certificate in</span><br><span class="line"></span><br><span class="line">the future, simply run Let&#x27;s Encrypt again.</span><br><span class="line"></span><br><span class="line">- If you like Let&#x27;s Encrypt, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">Donating to ISRG / Let&#x27;s Encrypt:  https://letsencrypt.org/donate</span><br><span class="line"></span><br><span class="line">Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>
<p>证书生成目录为<code>/etc/letsencrypt/live/</code>下域名对应目录下</p>
<h5 id="注意：获取证书时可以先关闭防火墙，然后确保80、443端口没有被占用-关闭nginx"><a href="#注意：获取证书时可以先关闭防火墙，然后确保80、443端口没有被占用-关闭nginx" class="headerlink" title="注意：获取证书时可以先关闭防火墙，然后确保80、443端口没有被占用(关闭nginx)"></a>注意：获取证书时可以先关闭防火墙，然后确保80、443端口没有被占用(关闭nginx)</h5><h2 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h2><p>此处以nginx 为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">	server_name example.com;</span><br><span class="line">	rewrite ^&#x2F;(.*) https:&#x2F;&#x2F;$server_name&#x2F;$1 permanent;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 443;</span><br><span class="line">        server_name example.com;</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate   &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;fullchain.pem;</span><br><span class="line">        ssl_certificate_key  &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;privkey.pem;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如出现<code>the &quot;ssl&quot; parameter requires ngx_http_ssl_module</code>错误,则需要安装<code>https</code>模块<br>进入nginx源码目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --with-http_ssl_module</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>然后将<code>objs</code>目录下<code>nginx</code>文件替换安装目录下的文件<br>重启nginx</p>
<h2 id="刷新证书"><a href="#刷新证书" class="headerlink" title="刷新证书"></a>刷新证书</h2><p><code>Let&#39;s Encrypt</code> 提供的证书只有 <code>90</code> 天的<code>有效期</code><br>我看可以使用如下命令刷新证书时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot renew --pre-hook &quot;systemctl stop nginx&quot; --post-hook &quot;systemctl start nginx&quot;</span><br></pre></td></tr></table></figure>
<p>也可以写个定时任务自动刷新,如使用<code>crontab</code></p>
]]></content>
      <tags>
        <tag>https</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>小米手环NFC模拟加密卡</title>
    <url>/posts/1fd4902a/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>



<h4 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h4><ul>
<li>小米手环NFC版</li>
<li>pn532或者其他nfc读写工具</li>
<li>MifareOneTool软件</li>
<li>原始门禁卡</li>
<li>中间卡</li>
</ul>
<h4 id="提取原始卡信息"><a href="#提取原始卡信息" class="headerlink" title="提取原始卡信息"></a>提取原始卡信息</h4><ol>
<li>连接<code>pn532</code>到PC，并打开<code>MifareOneTool</code></li>
<li><code>复制卡模式</code>选项卡下</li>
<li>点击<code>检测连接</code>(控制台输出设备信息后表示pn532连接成功)</li>
<li>将<code>原始门禁卡</code>放在pn532上</li>
<li>点击<code>扫描卡片</code>(控制台输出卡片信息代表检测到卡片)</li>
<li>点击<code>一键解原卡</code>(成功后会弹出保存窗口，命名后保存文件，例如origin.dump)</li>
</ol>
<h4 id="2选1-写入非加密信息到中间卡-lt-中间卡无法修改卡号-gt"><a href="#2选1-写入非加密信息到中间卡-lt-中间卡无法修改卡号-gt" class="headerlink" title="[2选1]写入非加密信息到中间卡&lt;中间卡无法修改卡号&gt;"></a>[2选1]写入非加密信息到中间卡&lt;中间卡<code>无法</code>修改卡号&gt;</h4><ol>
<li>将<code>中间卡</code>放在pn532上</li>
<li><code>高级模式</code>选项卡下</li>
<li>点击<code>写M1</code>，选择origin.dump文件，如有弹窗，选<code>取消</code>(以白卡方式写入)<br>此步骤会写入(非加密+加密)数据，此时用手环模拟会提示加密卡无法模拟<br> <strong>注意：</strong>若此处写入失败，可以参考<code>附录</code>处理</li>
<li>点击<code>选择key.mfd</code>，右下角切换到.dump文件，选择origin.dump文件</li>
<li>点击<code>清M1</code>，如有弹窗，选<code>取消</code>(以白卡方式写入)<br>此步骤会清理(加密)部分数据</li>
</ol>
<h4 id="2选1-写入非加密信息到中间卡-lt-中间卡可以修改卡号-gt"><a href="#2选1-写入非加密信息到中间卡-lt-中间卡可以修改卡号-gt" class="headerlink" title="[2选1]写入非加密信息到中间卡&lt;中间卡可以修改卡号&gt;"></a>[2选1]写入非加密信息到中间卡&lt;中间卡<code>可以</code>修改卡号&gt;</h4><ol>
<li>将<code>中间卡</code>放在pn532上</li>
<li><code>复制卡模式</code>选项卡下，<code>[3]写入新卡</code>块中</li>
<li>点击<code>写(UF)UID卡</code>，选择origin.dump文件，<br>此步骤会写入(非加密&lt;包括卡号&gt;+加密)数据，此时用手环模拟会提示加密卡无法模拟</li>
<li><code>高级模式</code>选项卡下，点击<code>选择key.mfd</code>，右下角切换到.dump文件，选择origin.dump文件</li>
<li>点击<code>清M1</code>，如有弹窗，选<code>取消</code>(以白卡方式写入)<br>此步骤会清理(加密)部分数据</li>
</ol>
<h4 id="手环模拟卡片"><a href="#手环模拟卡片" class="headerlink" title="手环模拟卡片"></a>手环模拟卡片</h4><ol>
<li>打开小米运动-&gt;我的-&gt;小米手环nfc-&gt;门卡模拟</li>
<li>将手环靠近<code>原始门禁卡</code>(中间卡)</li>
<li>手环模拟成功后命名</li>
</ol>
<h4 id="写入加密信息到手环"><a href="#写入加密信息到手环" class="headerlink" title="写入加密信息到手环"></a>写入加密信息到手环</h4><ol>
<li>打开MifareOneTool</li>
<li><code>高级模式</code>选项卡下</li>
<li>点一下<code>选择key.mfd</code>，弹出框后点<code>取消</code>(为了清理选项)</li>
<li>点击<code>写M1</code>，选择origin.dump文件，如有弹窗，选<code>取消</code>(以白卡方式写入)</li>
<li>如手环上有多张卡片，则先启用刚刚模拟的这张</li>
<li>手环靠近pn532(建议提前将手环放在pn532旁边)</li>
<li>控制台输出(63/64 写入成功)即代表成功</li>
</ol>
<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><ol>
<li>写入非加密信息到中间卡失败？<br>中间卡的<code>加密数据区</code>需要为<code>空</code>才可以写入新的加密数据<br>此时可以使用中间卡对应的dump文件<code>清M1</code></li>
<li>没有中间卡的dump文件？<br>参考<code>提取原始卡数据信息</code>步骤，提取中间卡的dump文件</li>
<li>使用<code>写M1</code>功能前，要注意下方选择key的按钮不能有值，即显示<code>选择key.mfd</code><br>若不是，则点击一下该按钮，再点取消，清空选择</li>
</ol>
]]></content>
      <tags>
        <tag>小米手环</tag>
        <tag>NFC</tag>
        <tag>门禁卡模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>关于java一些零零散散的点(一)</title>
    <url>/posts/7bc2ef7a/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<hr>
<h1 id="与equals"><a href="#与equals" class="headerlink" title="==与equals()"></a>==与equals()</h1><ul>
<li>对于<code>==</code><ul>
<li>比较<code>基本数据类型</code>时，比较的是<code>值</code></li>
<li>比较<code>对象</code>时，比较的是两个对象的<code>地址</code></li>
</ul>
</li>
<li>对于<code>equals()</code><ul>
<li><code>equals()</code>方法存在于<code>Object</code>类中</li>
<li><code>Object</code>类是所有类的直接或间接<code>父类</code></li>
<li><code>Object</code>类中<code>equals()</code>方法底层依赖的是<code>==</code>号<ul>
<li><strong><code>没有重写</code>equals()方法的类中，<code>equals()</code>与<code>==</code>号的效果一样，即比较对象地址</strong></li>
<li><strong><code>重写</code>后的equals()方法以实际为准，但一般都是比较两个对象的值</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="整型缓存问题"><a href="#整型缓存问题" class="headerlink" title="整型缓存问题"></a>整型缓存问题</h1><p>先来看一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line">    Integer integer1 = <span class="number">3</span>;</span><br><span class="line">    Integer integer2 = <span class="number">3</span>;    </span><br><span class="line">    System.out.println(integer1 == integer2);</span><br><span class="line"></span><br><span class="line">    Integer integer3 = <span class="number">300</span>;</span><br><span class="line">    Integer integer4 = <span class="number">300</span>;</span><br><span class="line">	System.out.println(integer3 == integer4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们知道对于<code>对象</code>==比较的是对象的引用<code>地址</code>，由此可能会认为以上代码输出的都是<code>false</code><br>然鹅，结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>
<p><strong>原因</strong>在于由 Java 5 开始，为 Integer 的操作引入了一个新的特性，用来节省内存和提高性能。整型对象在内部实现中通过使用相同的对象引用实现了缓存和重用。</p>
<ul>
<li>上面的规则适用于整数区间<code>-128</code> 到 <code>+127</code>，当然这两个值是默认值，可以修改。</li>
<li>这种 Integer 缓存策略<code>仅</code>在<code>自动装箱</code>的时候有用，使用<code>构造器</code>创建的 Integer 对象<code>不能</code>被缓存。</li>
</ul>
<p><strong>自动装箱</strong>：Java 编译器把<code>原始类型</code> <code>自动</code>转换为<code>封装类</code>的<code>过程</code>称为自动装箱，这相当于调用 <code>valueOf</code>方法 </p>
<p>我们可以看一下<code>Integer</code>类中的<code>valueOf</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">    	<span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在返回Integer对象前会在缓存中查找，已有的直接返回，找不到再实例化一个对象。</p>
<p><strong>扩展</strong></p>
<ul>
<li>整型数据的缓存范围可以通过<code>JVM</code>参数<code>-XX:AutoBoxCacheMax=size</code>调整</li>
<li>这种缓存行为不仅适用于Integer对象。我们针对所有整数类型的类都有类似的缓存机制。<ul>
<li><code>ByteCache</code> 用于缓存 <code>Byte</code> 对象</li>
<li><code>ShortCache</code> 用于缓存 <code>Short</code> 对象</li>
<li><code>LongCache</code> 用于缓存 <code>Long</code> 对象</li>
<li><code>CharacterCache</code> 用于缓存 <code>Character</code> 对象</li>
</ul>
</li>
<li><code>Byte</code>，<code>Short</code>，<code>Long</code> 有固定范围: <code>-128</code> 到 <code>127</code>。</li>
<li><code>Character</code>, 范围是 <code>0</code> 到<code>127</code>。</li>
<li>除了 <code>Integer</code> 可以通过参数改变范围外，其它的都不行。</li>
</ul>
<p>参考<br><a href="http://www.importnew.com/18884.html">理解Java Integer的缓存策略</a></p>
<hr>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于java一些零零散散的点(三)</title>
    <url>/posts/aa005433/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<hr>
<h1 id="Java监控文件变化"><a href="#Java监控文件变化" class="headerlink" title="Java监控文件变化"></a>Java监控文件变化</h1><h6 id="有时候我们想要配置文件修改后立即生效，但又不重启服务器时，可以使用Java自带的WatchService来实现，需要版本-gt-1-7"><a href="#有时候我们想要配置文件修改后立即生效，但又不重启服务器时，可以使用Java自带的WatchService来实现，需要版本-gt-1-7" class="headerlink" title="有时候我们想要配置文件修改后立即生效，但又不重启服务器时，可以使用Java自带的WatchService来实现，需要版本&gt;1.7"></a>有时候我们想要配置文件修改后立即生效，但又不重启服务器时，可以使用Java自带的<code>WatchService</code>来实现，需要<code>版本</code>&gt;<code>1.7</code></h6><p>直接上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">&quot;path&quot;</span>); <span class="comment">// 获取监控目录path</span></span><br><span class="line">        <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (WatchService watchService = FileSystems.getDefault().newWatchService()) &#123;</span><br><span class="line">                path.register( <span class="comment">// 注册监听事件</span></span><br><span class="line">                        watchService,</span><br><span class="line">                        StandardWatchEventKinds.ENTRY_CREATE,</span><br><span class="line">                        StandardWatchEventKinds.ENTRY_MODIFY,</span><br><span class="line">                        StandardWatchEventKinds.ENTRY_DELETE</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    WatchKey key = watchService.take();  <span class="comment">// 阻塞</span></span><br><span class="line">                    <span class="keyword">for</span> (WatchEvent&lt;?&gt; event : key.pollEvents()) &#123;</span><br><span class="line">                        WatchEvent&lt;Path&gt; ev = (WatchEvent&lt;Path&gt;) event;</span><br><span class="line">                        Path file = ev.context(); <span class="comment">// 得到事件中的文件</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) &#123;</span><br><span class="line">                            <span class="comment">// 创建时</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (StandardWatchEventKinds.ENTRY_MODIFY.equals(event.kind())) &#123;</span><br><span class="line">                            <span class="comment">// 修改时</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (StandardWatchEventKinds.ENTRY_DELETE.equals(event.kind())) &#123;</span><br><span class="line">                            <span class="comment">// 删除时</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    key.reset(); <span class="comment">// 处理成功后清除队列中的key，否则后续事件无法触发</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>一些注意点</p>
<ul>
<li>不支持注册单个文件的监控，若<code>path</code>不是<code>文件夹</code>则会抛出<code>java.nio.file.NotDirectoryException</code></li>
</ul>
]]></content>
      <tags>
        <tag>文件</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于java一些零零散散的点(二)</title>
    <url>/posts/d4f37418/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<hr>
<h1 id="instanceof与Class-isInstance-Object-obj-的区别"><a href="#instanceof与Class-isInstance-Object-obj-的区别" class="headerlink" title="instanceof与Class.isInstance(Object obj)的区别"></a>instanceof与Class.isInstance(Object obj)的区别</h1><ul>
<li><p>instanceof</p>
<ul>
<li>instanceof运算符只能被用于对象引用变量</li>
<li>运算符左侧为被测对象</li>
<li>测试被测对象是否为运算符右侧类或接口的实例</li>
</ul>
</li>
<li><p>Class.isInstance(Object obj)</p>
<ul>
<li>obj为被测对象</li>
<li>测试被测对象是否为Class的实例</li>
</ul>
</li>
</ul>
<hr>
<h1 id="不定项参数个数的问题"><a href="#不定项参数个数的问题" class="headerlink" title="不定项参数个数的问题"></a>不定项参数个数的问题</h1><ul>
<li>传入<code>单个</code> <code>数组</code><br>数组中每个元素为一个参数  </li>
<li>传入<code>多个</code> <code>数组</code><br>每个数组为一个参数</li>
<li>传入集合<br>每个集合为一个参数</li>
</ul>
<hr>
<h1 id="JDK动态代理与CGLIB"><a href="#JDK动态代理与CGLIB" class="headerlink" title="JDK动态代理与CGLIB"></a>JDK动态代理与CGLIB</h1><ul>
<li><p>JDK动态代理<br>针对接口实现，被代理类需要实现接口，只能代理接口方法,java自带，无需引入外部包</p>
</li>
<li><p>CGLIB<br>通过生成被代理对象的子类实现，可代理被代理对象内public,protected方法,被代理类不能是final类型,需要外部引入包</p>
</li>
</ul>
<hr>
<h1 id="反射获取方法参数名"><a href="#反射获取方法参数名" class="headerlink" title="反射获取方法参数名"></a>反射获取方法参数名</h1><ul>
<li><p>java.lang.reflect.Parameter类<br>通过method.getParameters()获取得到参数<br>在通过参数<code>getName()</code>方法得到参数名</p>
</li>
<li><p>若得到的事arg0等名称<br>是因为编译版本小于1.8</p>
</li>
<li><p>idea中可通过Java Compiler中设置模块编译版本大于<code>1.8</code><br>并且在Additional command line parameters中<br>设置 <code>-parameters</code></p>
</li>
<li><p>maven中可以配置插件</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">	&lt;configuration&gt;</span><br><span class="line">		&lt;compilerArgument&gt;-parameters&lt;/compilerArgument&gt;</span><br><span class="line">		&lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">		&lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">	&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="子线程中异常的捕获"><a href="#子线程中异常的捕获" class="headerlink" title="子线程中异常的捕获"></a>子线程中异常的捕获</h1><ul>
<li>子线程中的异常，可以根据情况在子线程中处理</li>
<li>若需要在父线程中处理,可使用java中的<code>Future</code>,<br>线程池执行任务时，使用<code>submit()</code>而不是<code>execute()</code>。  </li>
<li><code>submit</code>方法有一个返回值,可用于获取线程执行结果，即<code>Future.get()</code>，该方法在线程内部抛出异常时，可catch到<code>ExecutionException</code>，使用<code>ExecutionException.getCause()</code>即可得到内部异常。</li>
<li>注意<ul>
<li>Future.get()会<code>阻塞</code>函数以获取结果</li>
</ul>
</li>
</ul>
<hr>
<h1 id="一次线程池死锁问题"><a href="#一次线程池死锁问题" class="headerlink" title="一次线程池死锁问题"></a>一次线程池死锁问题</h1><p>写在前面：  </p>
<pre><code>使用线程池时,不要在Task中嵌套Task</code></pre><p>简单解释：</p>
<p><code>newFixedThreadPool</code>在当前池内线程全部被使用时，后来的任务会进行排队。此时，一个Task内部提交了一个新的Task，这个新的Task会进行排队。外部Task需要等待内部Task完成才会释放线程给后来的任务使用，而此时内部Task在排队，无法完成，进而导致双方都无法完成，形成死锁。</p>
<p>参考<br><a href="https://www.cnblogs.com/caoshenglu/p/9461567.html">线程池使用不当也会死锁？</a></p>
<hr>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次ThreadLocal取值失败的问题</title>
    <url>/posts/7ba3d7ca/</url>
    <content><![CDATA[<div style="display:none"><div>
<a id="more"></a>


<h5 id="简单描述一下问题的情况"><a href="#简单描述一下问题的情况" class="headerlink" title="简单描述一下问题的情况"></a>简单描述一下问题的情况</h5><p>1.<code>springboot</code>项目</p>
<p>2.使用<code>@FeignClient</code>处理微服务之间的调用</p>
<p>3.项目中使用了<code>feign.RequestInterceptor</code>处理<code>token</code>传递,token校验完成后存放于线程变量<code>ThreadLocal</code>中</p>
<p>4.开启<code>hystrix</code>后,在<code>RequestInterceptor</code>中无法获取到<code>ThreadLocal</code>存储的token</p>
<h5 id="查找问题的过程"><a href="#查找问题的过程" class="headerlink" title="查找问题的过程"></a>查找问题的过程</h5><p>1.首先通过断点发现ThreadLocal取值失败</p>
<p>2.怀疑是不在同一线程中，打印线程名，证实确实不是同一线程</p>
<p>3.了解到Hystrix默认使用线程隔离</p>
<h5 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h5><p>1.将<code>ThreadLocal</code>换成<code>InheritableThreadLocal</code>，这样可以在<code>子线程</code>内也获取到存入的值</p>
]]></content>
      <tags>
        <tag>线程</tag>
        <tag>ThreadLocal</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
</search>
